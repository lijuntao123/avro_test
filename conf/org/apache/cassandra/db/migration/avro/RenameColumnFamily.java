/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.cassandra.db.migration.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RenameColumnFamily extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RenameColumnFamily\",\"namespace\":\"org.apache.cassandra.db.migration.avro\",\"fields\":[{\"name\":\"ksname\",\"type\":\"string\"},{\"name\":\"cfid\",\"type\":\"int\"},{\"name\":\"old_cfname\",\"type\":\"string\"},{\"name\":\"new_cfname\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence ksname;
  @Deprecated public int cfid;
  @Deprecated public java.lang.CharSequence old_cfname;
  @Deprecated public java.lang.CharSequence new_cfname;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RenameColumnFamily() {}

  /**
   * All-args constructor.
   */
  public RenameColumnFamily(java.lang.CharSequence ksname, java.lang.Integer cfid, java.lang.CharSequence old_cfname, java.lang.CharSequence new_cfname) {
    this.ksname = ksname;
    this.cfid = cfid;
    this.old_cfname = old_cfname;
    this.new_cfname = new_cfname;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ksname;
    case 1: return cfid;
    case 2: return old_cfname;
    case 3: return new_cfname;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ksname = (java.lang.CharSequence)value$; break;
    case 1: cfid = (java.lang.Integer)value$; break;
    case 2: old_cfname = (java.lang.CharSequence)value$; break;
    case 3: new_cfname = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ksname' field.
   */
  public java.lang.CharSequence getKsname() {
    return ksname;
  }

  /**
   * Sets the value of the 'ksname' field.
   * @param value the value to set.
   */
  public void setKsname(java.lang.CharSequence value) {
    this.ksname = value;
  }

  /**
   * Gets the value of the 'cfid' field.
   */
  public java.lang.Integer getCfid() {
    return cfid;
  }

  /**
   * Sets the value of the 'cfid' field.
   * @param value the value to set.
   */
  public void setCfid(java.lang.Integer value) {
    this.cfid = value;
  }

  /**
   * Gets the value of the 'old_cfname' field.
   */
  public java.lang.CharSequence getOldCfname() {
    return old_cfname;
  }

  /**
   * Sets the value of the 'old_cfname' field.
   * @param value the value to set.
   */
  public void setOldCfname(java.lang.CharSequence value) {
    this.old_cfname = value;
  }

  /**
   * Gets the value of the 'new_cfname' field.
   */
  public java.lang.CharSequence getNewCfname() {
    return new_cfname;
  }

  /**
   * Sets the value of the 'new_cfname' field.
   * @param value the value to set.
   */
  public void setNewCfname(java.lang.CharSequence value) {
    this.new_cfname = value;
  }

  /** Creates a new RenameColumnFamily RecordBuilder */
  public static org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder newBuilder() {
    return new org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder();
  }
  
  /** Creates a new RenameColumnFamily RecordBuilder by copying an existing Builder */
  public static org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder newBuilder(org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder other) {
    return new org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder(other);
  }
  
  /** Creates a new RenameColumnFamily RecordBuilder by copying an existing RenameColumnFamily instance */
  public static org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder newBuilder(org.apache.cassandra.db.migration.avro.RenameColumnFamily other) {
    return new org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder(other);
  }
  
  /**
   * RecordBuilder for RenameColumnFamily instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RenameColumnFamily>
    implements org.apache.avro.data.RecordBuilder<RenameColumnFamily> {

    private java.lang.CharSequence ksname;
    private int cfid;
    private java.lang.CharSequence old_cfname;
    private java.lang.CharSequence new_cfname;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.cassandra.db.migration.avro.RenameColumnFamily.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ksname)) {
        this.ksname = data().deepCopy(fields()[0].schema(), other.ksname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cfid)) {
        this.cfid = data().deepCopy(fields()[1].schema(), other.cfid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.old_cfname)) {
        this.old_cfname = data().deepCopy(fields()[2].schema(), other.old_cfname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.new_cfname)) {
        this.new_cfname = data().deepCopy(fields()[3].schema(), other.new_cfname);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RenameColumnFamily instance */
    private Builder(org.apache.cassandra.db.migration.avro.RenameColumnFamily other) {
            super(org.apache.cassandra.db.migration.avro.RenameColumnFamily.SCHEMA$);
      if (isValidValue(fields()[0], other.ksname)) {
        this.ksname = data().deepCopy(fields()[0].schema(), other.ksname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cfid)) {
        this.cfid = data().deepCopy(fields()[1].schema(), other.cfid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.old_cfname)) {
        this.old_cfname = data().deepCopy(fields()[2].schema(), other.old_cfname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.new_cfname)) {
        this.new_cfname = data().deepCopy(fields()[3].schema(), other.new_cfname);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'ksname' field */
    public java.lang.CharSequence getKsname() {
      return ksname;
    }
    
    /** Sets the value of the 'ksname' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder setKsname(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ksname = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ksname' field has been set */
    public boolean hasKsname() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ksname' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder clearKsname() {
      ksname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cfid' field */
    public java.lang.Integer getCfid() {
      return cfid;
    }
    
    /** Sets the value of the 'cfid' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder setCfid(int value) {
      validate(fields()[1], value);
      this.cfid = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cfid' field has been set */
    public boolean hasCfid() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cfid' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder clearCfid() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'old_cfname' field */
    public java.lang.CharSequence getOldCfname() {
      return old_cfname;
    }
    
    /** Sets the value of the 'old_cfname' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder setOldCfname(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.old_cfname = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'old_cfname' field has been set */
    public boolean hasOldCfname() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'old_cfname' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder clearOldCfname() {
      old_cfname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'new_cfname' field */
    public java.lang.CharSequence getNewCfname() {
      return new_cfname;
    }
    
    /** Sets the value of the 'new_cfname' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder setNewCfname(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.new_cfname = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'new_cfname' field has been set */
    public boolean hasNewCfname() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'new_cfname' field */
    public org.apache.cassandra.db.migration.avro.RenameColumnFamily.Builder clearNewCfname() {
      new_cfname = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public RenameColumnFamily build() {
      try {
        RenameColumnFamily record = new RenameColumnFamily();
        record.ksname = fieldSetFlags()[0] ? this.ksname : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cfid = fieldSetFlags()[1] ? this.cfid : (java.lang.Integer) defaultValue(fields()[1]);
        record.old_cfname = fieldSetFlags()[2] ? this.old_cfname : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.new_cfname = fieldSetFlags()[3] ? this.new_cfname : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
