/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.eastsoft.river.router.proto.service1;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GatewayInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GatewayInfo\",\"namespace\":\"com.eastsoft.river.router.proto.service1\",\"fields\":[{\"name\":\"gid\",\"type\":\"string\"},{\"name\":\"timeStamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence gid;
  @Deprecated public java.lang.CharSequence timeStamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GatewayInfo() {}

  /**
   * All-args constructor.
   */
  public GatewayInfo(java.lang.CharSequence gid, java.lang.CharSequence timeStamp) {
    this.gid = gid;
    this.timeStamp = timeStamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gid;
    case 1: return timeStamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gid = (java.lang.CharSequence)value$; break;
    case 1: timeStamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gid' field.
   */
  public java.lang.CharSequence getGid() {
    return gid;
  }

  /**
   * Sets the value of the 'gid' field.
   * @param value the value to set.
   */
  public void setGid(java.lang.CharSequence value) {
    this.gid = value;
  }

  /**
   * Gets the value of the 'timeStamp' field.
   */
  public java.lang.CharSequence getTimeStamp() {
    return timeStamp;
  }

  /**
   * Sets the value of the 'timeStamp' field.
   * @param value the value to set.
   */
  public void setTimeStamp(java.lang.CharSequence value) {
    this.timeStamp = value;
  }

  /** Creates a new GatewayInfo RecordBuilder */
  public static com.eastsoft.river.router.proto.service1.GatewayInfo.Builder newBuilder() {
    return new com.eastsoft.river.router.proto.service1.GatewayInfo.Builder();
  }
  
  /** Creates a new GatewayInfo RecordBuilder by copying an existing Builder */
  public static com.eastsoft.river.router.proto.service1.GatewayInfo.Builder newBuilder(com.eastsoft.river.router.proto.service1.GatewayInfo.Builder other) {
    return new com.eastsoft.river.router.proto.service1.GatewayInfo.Builder(other);
  }
  
  /** Creates a new GatewayInfo RecordBuilder by copying an existing GatewayInfo instance */
  public static com.eastsoft.river.router.proto.service1.GatewayInfo.Builder newBuilder(com.eastsoft.river.router.proto.service1.GatewayInfo other) {
    return new com.eastsoft.river.router.proto.service1.GatewayInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for GatewayInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GatewayInfo>
    implements org.apache.avro.data.RecordBuilder<GatewayInfo> {

    private java.lang.CharSequence gid;
    private java.lang.CharSequence timeStamp;

    /** Creates a new Builder */
    private Builder() {
      super(com.eastsoft.river.router.proto.service1.GatewayInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.eastsoft.river.router.proto.service1.GatewayInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gid)) {
        this.gid = data().deepCopy(fields()[0].schema(), other.gid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[1].schema(), other.timeStamp);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GatewayInfo instance */
    private Builder(com.eastsoft.river.router.proto.service1.GatewayInfo other) {
            super(com.eastsoft.river.router.proto.service1.GatewayInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.gid)) {
        this.gid = data().deepCopy(fields()[0].schema(), other.gid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeStamp)) {
        this.timeStamp = data().deepCopy(fields()[1].schema(), other.timeStamp);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'gid' field */
    public java.lang.CharSequence getGid() {
      return gid;
    }
    
    /** Sets the value of the 'gid' field */
    public com.eastsoft.river.router.proto.service1.GatewayInfo.Builder setGid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.gid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gid' field has been set */
    public boolean hasGid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gid' field */
    public com.eastsoft.river.router.proto.service1.GatewayInfo.Builder clearGid() {
      gid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timeStamp' field */
    public java.lang.CharSequence getTimeStamp() {
      return timeStamp;
    }
    
    /** Sets the value of the 'timeStamp' field */
    public com.eastsoft.river.router.proto.service1.GatewayInfo.Builder setTimeStamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timeStamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timeStamp' field has been set */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timeStamp' field */
    public com.eastsoft.river.router.proto.service1.GatewayInfo.Builder clearTimeStamp() {
      timeStamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public GatewayInfo build() {
      try {
        GatewayInfo record = new GatewayInfo();
        record.gid = fieldSetFlags()[0] ? this.gid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timeStamp = fieldSetFlags()[1] ? this.timeStamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
