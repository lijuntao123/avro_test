/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FAVORITE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("favorite_number", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FAVORITE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("favorite_color", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLASS1_FIELD_DESC = new org.apache.thrift.protocol.TField("class1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("first_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_name", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public String name; // required
  public String favorite_number; // required
  public String favorite_color; // required
  public String age; // required
  public String class1; // required
  public String number; // required
  public String address; // required
  public String phone; // required
  public String first_name; // required
  public String last_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    FAVORITE_NUMBER((short)2, "favorite_number"),
    FAVORITE_COLOR((short)3, "favorite_color"),
    AGE((short)4, "age"),
    CLASS1((short)5, "class1"),
    NUMBER((short)6, "number"),
    ADDRESS((short)7, "address"),
    PHONE((short)8, "phone"),
    FIRST_NAME((short)9, "first_name"),
    LAST_NAME((short)10, "last_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // FAVORITE_NUMBER
          return FAVORITE_NUMBER;
        case 3: // FAVORITE_COLOR
          return FAVORITE_COLOR;
        case 4: // AGE
          return AGE;
        case 5: // CLASS1
          return CLASS1;
        case 6: // NUMBER
          return NUMBER;
        case 7: // ADDRESS
          return ADDRESS;
        case 8: // PHONE
          return PHONE;
        case 9: // FIRST_NAME
          return FIRST_NAME;
        case 10: // LAST_NAME
          return LAST_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAVORITE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("favorite_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAVORITE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("favorite_color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS1, new org.apache.thrift.meta_data.FieldMetaData("class1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("first_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("last_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    String name,
    String favorite_number,
    String favorite_color,
    String age,
    String class1,
    String number,
    String address,
    String phone,
    String first_name,
    String last_name)
  {
    this();
    this.name = name;
    this.favorite_number = favorite_number;
    this.favorite_color = favorite_color;
    this.age = age;
    this.class1 = class1;
    this.number = number;
    this.address = address;
    this.phone = phone;
    this.first_name = first_name;
    this.last_name = last_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFavorite_number()) {
      this.favorite_number = other.favorite_number;
    }
    if (other.isSetFavorite_color()) {
      this.favorite_color = other.favorite_color;
    }
    if (other.isSetAge()) {
      this.age = other.age;
    }
    if (other.isSetClass1()) {
      this.class1 = other.class1;
    }
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetFirst_name()) {
      this.first_name = other.first_name;
    }
    if (other.isSetLast_name()) {
      this.last_name = other.last_name;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  public void clear() {
    this.name = null;
    this.favorite_number = null;
    this.favorite_color = null;
    this.age = null;
    this.class1 = null;
    this.number = null;
    this.address = null;
    this.phone = null;
    this.first_name = null;
    this.last_name = null;
  }

  public String getName() {
    return this.name;
  }

  public User setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getFavorite_number() {
    return this.favorite_number;
  }

  public User setFavorite_number(String favorite_number) {
    this.favorite_number = favorite_number;
    return this;
  }

  public void unsetFavorite_number() {
    this.favorite_number = null;
  }

  /** Returns true if field favorite_number is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorite_number() {
    return this.favorite_number != null;
  }

  public void setFavorite_numberIsSet(boolean value) {
    if (!value) {
      this.favorite_number = null;
    }
  }

  public String getFavorite_color() {
    return this.favorite_color;
  }

  public User setFavorite_color(String favorite_color) {
    this.favorite_color = favorite_color;
    return this;
  }

  public void unsetFavorite_color() {
    this.favorite_color = null;
  }

  /** Returns true if field favorite_color is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorite_color() {
    return this.favorite_color != null;
  }

  public void setFavorite_colorIsSet(boolean value) {
    if (!value) {
      this.favorite_color = null;
    }
  }

  public String getAge() {
    return this.age;
  }

  public User setAge(String age) {
    this.age = age;
    return this;
  }

  public void unsetAge() {
    this.age = null;
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return this.age != null;
  }

  public void setAgeIsSet(boolean value) {
    if (!value) {
      this.age = null;
    }
  }

  public String getClass1() {
    return this.class1;
  }

  public User setClass1(String class1) {
    this.class1 = class1;
    return this;
  }

  public void unsetClass1() {
    this.class1 = null;
  }

  /** Returns true if field class1 is set (has been assigned a value) and false otherwise */
  public boolean isSetClass1() {
    return this.class1 != null;
  }

  public void setClass1IsSet(boolean value) {
    if (!value) {
      this.class1 = null;
    }
  }

  public String getNumber() {
    return this.number;
  }

  public User setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public User setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public User setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getFirst_name() {
    return this.first_name;
  }

  public User setFirst_name(String first_name) {
    this.first_name = first_name;
    return this;
  }

  public void unsetFirst_name() {
    this.first_name = null;
  }

  /** Returns true if field first_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_name() {
    return this.first_name != null;
  }

  public void setFirst_nameIsSet(boolean value) {
    if (!value) {
      this.first_name = null;
    }
  }

  public String getLast_name() {
    return this.last_name;
  }

  public User setLast_name(String last_name) {
    this.last_name = last_name;
    return this;
  }

  public void unsetLast_name() {
    this.last_name = null;
  }

  /** Returns true if field last_name is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_name() {
    return this.last_name != null;
  }

  public void setLast_nameIsSet(boolean value) {
    if (!value) {
      this.last_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FAVORITE_NUMBER:
      if (value == null) {
        unsetFavorite_number();
      } else {
        setFavorite_number((String)value);
      }
      break;

    case FAVORITE_COLOR:
      if (value == null) {
        unsetFavorite_color();
      } else {
        setFavorite_color((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((String)value);
      }
      break;

    case CLASS1:
      if (value == null) {
        unsetClass1();
      } else {
        setClass1((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirst_name();
      } else {
        setFirst_name((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLast_name();
      } else {
        setLast_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case FAVORITE_NUMBER:
      return getFavorite_number();

    case FAVORITE_COLOR:
      return getFavorite_color();

    case AGE:
      return getAge();

    case CLASS1:
      return getClass1();

    case NUMBER:
      return getNumber();

    case ADDRESS:
      return getAddress();

    case PHONE:
      return getPhone();

    case FIRST_NAME:
      return getFirst_name();

    case LAST_NAME:
      return getLast_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case FAVORITE_NUMBER:
      return isSetFavorite_number();
    case FAVORITE_COLOR:
      return isSetFavorite_color();
    case AGE:
      return isSetAge();
    case CLASS1:
      return isSetClass1();
    case NUMBER:
      return isSetNumber();
    case ADDRESS:
      return isSetAddress();
    case PHONE:
      return isSetPhone();
    case FIRST_NAME:
      return isSetFirst_name();
    case LAST_NAME:
      return isSetLast_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_favorite_number = true && this.isSetFavorite_number();
    boolean that_present_favorite_number = true && that.isSetFavorite_number();
    if (this_present_favorite_number || that_present_favorite_number) {
      if (!(this_present_favorite_number && that_present_favorite_number))
        return false;
      if (!this.favorite_number.equals(that.favorite_number))
        return false;
    }

    boolean this_present_favorite_color = true && this.isSetFavorite_color();
    boolean that_present_favorite_color = true && that.isSetFavorite_color();
    if (this_present_favorite_color || that_present_favorite_color) {
      if (!(this_present_favorite_color && that_present_favorite_color))
        return false;
      if (!this.favorite_color.equals(that.favorite_color))
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (!this.age.equals(that.age))
        return false;
    }

    boolean this_present_class1 = true && this.isSetClass1();
    boolean that_present_class1 = true && that.isSetClass1();
    if (this_present_class1 || that_present_class1) {
      if (!(this_present_class1 && that_present_class1))
        return false;
      if (!this.class1.equals(that.class1))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_first_name = true && this.isSetFirst_name();
    boolean that_present_first_name = true && that.isSetFirst_name();
    if (this_present_first_name || that_present_first_name) {
      if (!(this_present_first_name && that_present_first_name))
        return false;
      if (!this.first_name.equals(that.first_name))
        return false;
    }

    boolean this_present_last_name = true && this.isSetLast_name();
    boolean that_present_last_name = true && that.isSetLast_name();
    if (this_present_last_name || that_present_last_name) {
      if (!(this_present_last_name && that_present_last_name))
        return false;
      if (!this.last_name.equals(that.last_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    User typedOther = (User)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavorite_number()).compareTo(typedOther.isSetFavorite_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorite_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorite_number, typedOther.favorite_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavorite_color()).compareTo(typedOther.isSetFavorite_color());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorite_color()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorite_color, typedOther.favorite_color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(typedOther.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, typedOther.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClass1()).compareTo(typedOther.isSetClass1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClass1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.class1, typedOther.class1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, typedOther.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirst_name()).compareTo(typedOther.isSetFirst_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_name, typedOther.first_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_name()).compareTo(typedOther.isSetLast_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_name, typedOther.last_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favorite_number:");
    if (this.favorite_number == null) {
      sb.append("null");
    } else {
      sb.append(this.favorite_number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favorite_color:");
    if (this.favorite_color == null) {
      sb.append("null");
    } else {
      sb.append(this.favorite_color);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    if (this.age == null) {
      sb.append("null");
    } else {
      sb.append(this.age);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("class1:");
    if (this.class1 == null) {
      sb.append("null");
    } else {
      sb.append(this.class1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("first_name:");
    if (this.first_name == null) {
      sb.append("null");
    } else {
      sb.append(this.first_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_name:");
    if (this.last_name == null) {
      sb.append("null");
    } else {
      sb.append(this.last_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAVORITE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.favorite_number = iprot.readString();
              struct.setFavorite_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAVORITE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.favorite_color = iprot.readString();
              struct.setFavorite_colorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.age = iprot.readString();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLASS1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.class1 = iprot.readString();
              struct.setClass1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first_name = iprot.readString();
              struct.setFirst_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_name = iprot.readString();
              struct.setLast_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.favorite_number != null) {
        oprot.writeFieldBegin(FAVORITE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.favorite_number);
        oprot.writeFieldEnd();
      }
      if (struct.favorite_color != null) {
        oprot.writeFieldBegin(FAVORITE_COLOR_FIELD_DESC);
        oprot.writeString(struct.favorite_color);
        oprot.writeFieldEnd();
      }
      if (struct.age != null) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeString(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.class1 != null) {
        oprot.writeFieldBegin(CLASS1_FIELD_DESC);
        oprot.writeString(struct.class1);
        oprot.writeFieldEnd();
      }
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.first_name != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.first_name);
        oprot.writeFieldEnd();
      }
      if (struct.last_name != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.last_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetFavorite_number()) {
        optionals.set(1);
      }
      if (struct.isSetFavorite_color()) {
        optionals.set(2);
      }
      if (struct.isSetAge()) {
        optionals.set(3);
      }
      if (struct.isSetClass1()) {
        optionals.set(4);
      }
      if (struct.isSetNumber()) {
        optionals.set(5);
      }
      if (struct.isSetAddress()) {
        optionals.set(6);
      }
      if (struct.isSetPhone()) {
        optionals.set(7);
      }
      if (struct.isSetFirst_name()) {
        optionals.set(8);
      }
      if (struct.isSetLast_name()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFavorite_number()) {
        oprot.writeString(struct.favorite_number);
      }
      if (struct.isSetFavorite_color()) {
        oprot.writeString(struct.favorite_color);
      }
      if (struct.isSetAge()) {
        oprot.writeString(struct.age);
      }
      if (struct.isSetClass1()) {
        oprot.writeString(struct.class1);
      }
      if (struct.isSetNumber()) {
        oprot.writeString(struct.number);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetFirst_name()) {
        oprot.writeString(struct.first_name);
      }
      if (struct.isSetLast_name()) {
        oprot.writeString(struct.last_name);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.favorite_number = iprot.readString();
        struct.setFavorite_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.favorite_color = iprot.readString();
        struct.setFavorite_colorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.age = iprot.readString();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.class1 = iprot.readString();
        struct.setClass1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.number = iprot.readString();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(7)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.first_name = iprot.readString();
        struct.setFirst_nameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.last_name = iprot.readString();
        struct.setLast_nameIsSet(true);
      }
    }
  }

}

